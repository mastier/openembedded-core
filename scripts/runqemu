#!/bin/bash
#
# Handle running OE images standalone with QEMU
#
# Copyright (C) 2006-2016 Linux Foundation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

usage() {
cat <<_EOF
Usage: runqemu <options>
    -m <machine>, specify machine
    -k <kernel>, specify kernel
    -r <rootfs>, specify disk image, rootfs or nfs dir
    -t <fstype>, specify fstypes, supported types:
                 ext[234], jffs2, btrfs, cpio.gz(ramfs), cpio, hddimg,
                 hdddirect, vmdk, wic, qcow2, vdi
    -n, nographic, disables video console
    -K, enable KVM when running x86 and x86-64 (VT-capable CPU required)
    -V, enables KVM with VHOST support when running x86 and x86-64 (VT-capable CPU required)
    -v, publicvnc - enable a VNC server open to all hosts
    -u, slirp mode, use user mode networking (no root privilege is required)
    -a, support audio
    -s, enable a serial console on /dev/ttyS0
    -q <qemuparams> - specify custom parameters to QEMU
    -b <bootparams> - specify custom kernel parameters during boot
    -p <portnum>, tcp serial port number
    -B <biosdir>, bios directory
    -F <biosfilename>, bios filename.

Examples:
  runqemu -m qemuarm -n
  runqemu -m qemuarm -t ext4
  runqemu -m qemux86-64 -r core-image-sato -t ext4
  runqemu -m qemux86 -r path/to/nfsrootdir/
  runqemu -r path/to/deploy/dir/image/file.vmdk
  runqemu -m qemumips -q "-m 256"
  runqemu -m qemuppc -b "psplash=false"
_EOF
    exit 1
}

if [ "x$1" = "x" ]; then
    usage
fi

error_help() {
    echo "Error: "$*
    usage
}

error_exit() {
    echo "Error: "$*
    exit 1
}

LAZY_ROOTFS=""
SCRIPT_QEMU_OPT=""
SCRIPT_QEMU_EXTRA_OPT=""
SCRIPT_KERNEL_OPT=""
SERIALSTDIO=""
SLIRP_ENABLED=""
TCPSERIAL_PORTNUM=""
KVM_ENABLED=""
KVM_ACTIVE=""
VHOST_ENABLED=""
VHOST_ACTIVE=""
IS_VM="no"
# Export for qemu-system-foo
export QEMU_AUDIO_DRV="none"

# Check whether it is a supported fstype.
check_fstype() {
    case /$1/ in
    /ext[234]/|/jffs2/|/btrfs/|/cpio.gz/|/cpio/)
        :
        ;;
    /ramfs/)
        FSTYPE="cpio.gz"
        ;;
    /hddimg/|/hdddirect/|/vmdk/|/wic/|/qcow2/|/vdi/|/iso/)
        IS_VM="yes"
        ;;
    *)
        error_exit "Unknown FSTYPE: $1"
        ;;
    esac
}

while getopts "m:t:k:aKVhvsnuq:b:r:p:B:F:" OPT; do
    case $OPT in
    m)
        MACHINE="$OPTARG"
        ;;
    k)
        KERNEL="$OPTARG"
        if [ ! -e "$KERNEL" ]; then
            error_exit "kernel: \"$KERNEL\" not found!"
        fi
        ;;
    t)
        FSTYPE="$OPTARG"
        check_fstype $FSTYPE
        ;;
    K|V)
        KVM_ENABLED="yes"
        KVM_CAPABLE=`grep -q 'vmx\|svm' /proc/cpuinfo && echo 1`
        [ "$OPT" = "V" ] && VHOST_ENABLED="yes"
        ;;
    s)
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -nographic -serial stdio"
        SCRIPT_KERNEL_OPT="$SCRIPT_KERNEL_OPT console=ttyS0"
        SERIALSTDIO="1"
        ;;
    n)
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -nographic"
        SCRIPT_KERNEL_OPT="$SCRIPT_KERNEL_OPT console=ttyS0"
        ;;
    q)
        SCRIPT_QEMU_EXTRA_OPT="$OPTARG"
        # Warn user if they try to specify serial or kvm options
        # to use simplified options instead
        serial_option=`expr "$SCRIPT_QEMU_EXTRA_OPT" : '.*\(-serial\)'`
        kvm_option=`expr "$SCRIPT_QEMU_EXTRA_OPT" : '.*\(-enable-kvm\)'`
        vga_option=`expr "$SCRIPT_QEMU_EXTRA_OPT" : '.*\(-vga\)'`
        [ ! -z "$serial_option" -o ! -z "$kvm_option" ] && \
            echo "Please use simplified -s or -K options instead"
        ;;
    b)
        SCRIPT_KERNEL_OPT="$SCRIPT_KERNEL_OPT $OPTARG"
        ;;
    v)
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -vnc :0"
        ;;
    r)
        if [ -d "$OPTARG" ]; then
            echo "Assuming $OPTARG is an nfs rootfs"
            FSTYPE=nfs
        elif [ -e "$OPTARG" ]; then
            # Extract the extension
            EXT=`echo $OPTARG | awk -F . '{ print \$NF }'`
            FSTYPE=$EXT
            check_fstype $FSTYPE
        else
            LAZY_ROOTFS="yes"
        fi
        ROOTFS="$OPTARG"
        ;;
    u)
        SLIRP_ENABLED="yes"
        ;;
    p)
        TCPSERIAL_PORTNUM="$OPTARG"
        ;;
    a)
        export QEMU_AUDIO_DRV="alsa"
        ;;
    B)
        CUSTOMBIOSDIR="$OPTARG"
        ;;
    F)
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -bios $OPTARG"
        ;;
    *)
        usage
        ;;
    esac
done

if [ ! -z "$MACHINE" ]; then
    if [ -z "$DEPLOY_DIR_IMAGE" ]; then
        eval `MACHINE=$MACHINE bitbake -e | grep -m 1 '^DEPLOY_DIR_IMAGE="'`
    fi
    runqemu_file=$DEPLOY_DIR_IMAGE/qemu-boot
elif [ -e "$KERNEL" ]; then
    runqemu_file=$(dirname $KERNEL)/qemu-boot
elif [ -e "$ROOTFS" -a ! -d "$ROOTFS" ]; then
    runqemu_file=$(dirname $ROOTFS)/qemu-boot
fi

if [ -z "$runqemu_file" ]; then
    echo "Need one of -m, -k or -r!"
fi

if [ ! -e "$runqemu_file" ]; then
    error_exit "$runqemu_file is not found, make sure you have built the image, and the machine is supported by qemu."
fi

. $runqemu_file || exit 1

KERNEL=${KERNEL:=$DEPLOY_DIR_IMAGE/$QEMU_DEFAULT_KERNEL}
FSTYPE=${FSTYPE:=$QEMU_DEFAULT_FSTYPE}

if [ "$QEMU_AUDIO_DRV" = "alsa" ]; then
    if [ "$TUNE_ARCH" = "x86" -o "$TUNE_ARCH" = "x86_64" ]; then
        echo "Enabling audio in qemu."
        echo "Please install snd_intel8x0 or snd_ens1370 driver in linux guest."
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -soundhw ac97,es1370"
    else
        error_exit "$TUNE_ARCH doesn't support audio"
    fi
fi

# Report errors for missing combinations of options
if [ "$FSTYPE" = "nfs" -a -z "$ROOTFS" ]; then
    error_exit "NFS booting without an explicit ROOTFS path is not yet supported"
fi

if [ ! -c /dev/net/tun ] ; then
    error_exit "TUN control device /dev/net/tun is unavailable; you may need to enable TUN (e.g. sudo modprobe tun)"
elif [ ! -w /dev/net/tun ] ; then
    error_exit "TUN control device /dev/net/tun is not writable, please fix (e.g. sudo chmod 666 /dev/net/tun)"
fi

YOCTO_KVM_WIKI="https://wiki.yoctoproject.org/wiki/How_to_enable_KVM_for_Poky_qemu"
YOCTO_PARAVIRT_KVM_WIKI="https://wiki.yoctoproject.org/wiki/Running_an_x86_Yocto_Linux_image_under_QEMU_KVM"
# Detect KVM configuration
if [ "x$KVM_ENABLED" = "xyes" ]; then
    if [ -z "$KVM_CAPABLE" ]; then
        echo "You are trying to enable KVM on a cpu without VT support."
        echo "Remove -K from the command-line, or refer"
        echo "$YOCTO_KVM_WIKI";
        exit 1;
    fi
    case $TUNE_ARCH in
        x86|i[3456]86|x86_64)
            echo "Enabling KVM support"
        ;;
        *)
            error_exit "KVM only support x86 & x86-64. Remove -K from the command-line";
        ;;
    esac
    if [ ! -e /dev/kvm ]; then
        echo "Missing KVM device. Have you inserted kvm modules?"
        echo "For further help see:"
        echo "$YOCTO_KVM_WIKI";
        exit 1;
    fi
    if [ -w /dev/kvm -a -r /dev/kvm ]; then
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -enable-kvm"
        KVM_ACTIVE="yes"
    else
        echo "You have no rights on /dev/kvm."
        echo "Please change the ownership of this file as described at:"
        echo "$YOCTO_KVM_WIKI";
        exit 1;
    fi
    if [ "x$VHOST_ENABLED" = "xyes" ]; then
        if [ ! -e /dev/vhost-net ]; then
            echo "Missing virtio net device. Have you inserted vhost-net module?"
            echo "For further help see:"
            echo "$YOCTO_PARAVIRT_KVM_WIKI";
            exit 1;
        fi

        if [ -w /dev/vhost-net -a -r /dev/vhost-net ]; then
            VHOST_ACTIVE="yes"
        else
            echo "You have no rights on /dev/vhost-net."
            echo "Please change the ownership of this file as described at:"
            echo "$YOCTO_KVM_WIKI";
            exit 1;
        fi
    fi
fi

# Locate a rootfs image to boot which matches our expected
# machine and fstype. 
findimage() {
    machine=$1
    ext=$2

    # Sort rootfs candidates by modification time - the most
    # recently created one is the one we most likely want to boot.
    filename=`ls -t1 $DEPLOY_DIR_IMAGE/*-image*$machine.$ext 2>/dev/null | head -n1`
    if [ "x$filename" != "x" ]; then
        ROOTFS=$filename
        return
    fi

    error_exit "Couldn't find a $ext rootfs image in $DEPLOY_DIR_IMAGE"
}

# Handle cases where a ROOTFS type is given instead of a filename, e.g.
# core-image-sato
if [ "$LAZY_ROOTFS" = "yes" ]; then
    echo "Assuming $ROOTFS really means $DEPLOY_DIR_IMAGE/$ROOTFS-$MACHINE.$FSTYPE"
    ROOTFS=$DEPLOY_DIR_IMAGE/$ROOTFS-$MACHINE.$FSTYPE
fi
if [ -z "$ROOTFS" ]; then
    findimage $MACHINE $FSTYPE
    if [ -z "$ROOTFS" ]; then
        error_help "Unable to determine default rootfs for MACHINE [$MACHINE]"
    fi
fi
# ROOTFS is now set for all cases, now expand it to be an absolute path, it should exist at this point
ROOTFS=`readlink -f $ROOTFS`
if [ ! -e "$ROOTFS" ]; then
    error_exit "Error: Image file $ROOTFS doesn't exist"
fi

echo ""
echo "Continuing with the following parameters:"
if [ "$IS_VM" = "no" ]; then
    if [ ! -f "$KERNEL" ]; then
        error_exit "Error: Kernel image file $KERNEL doesn't exist"
    fi
    echo "KERNEL: [$KERNEL]"
    echo "ROOTFS: [$ROOTFS]"
else
    echo "VM:   [$ROOTFS]"
fi

INTERNAL_SCRIPT="$0-internal"
if [ ! -f "$INTERNAL_SCRIPT" -o ! -r "$INTERNAL_SCRIPT" ]; then
    INTERNAL_SCRIPT=`which runqemu-internal`
fi

# Specify directory for BIOS, VGA BIOS and keymaps
if [ ! -z "$CUSTOMBIOSDIR" ]; then
    if [ -d "$STAGING_DIR_NATIVE/$CUSTOMBIOSDIR" ]; then
        echo "Assuming biosdir is $STAGING_DIR_NATIVE/$CUSTOMBIOSDIR"
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -L $STAGING_DIR_NATIVE/$CUSTOMBIOSDIR"
    elif [ -d "$STAGING_DIR_HOST/$CUSTOMBIOSDIR" ]; then
        echo "Assuming biosdir is $STAGING_DIR_HOST/$CUSTOMBIOSDIR"
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -L $STAGING_DIR_HOST/$CUSTOMBIOSDIR"
    else
        if [ ! -d "$CUSTOMBIOSDIR" ]; then
            echo "Custom BIOS directory not found. Tried: $CUSTOMBIOSDIR"
            echo "and $STAGING_DIR_NATIVE/$CUSTOMBIOSDIR"
            echo "and $STAGING_DIR_HOST/$CUSTOMBIOSDIR"
            exit 1;
        fi
        echo "Assuming biosdir is $CUSTOMBIOSDIR"
        SCRIPT_QEMU_OPT="$SCRIPT_QEMU_OPT -L $CUSTOMBIOSDIR"
    fi
fi

. $INTERNAL_SCRIPT
exit $?
