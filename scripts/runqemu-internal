#!/bin/bash -x

# Handle running OE images under qemu
#
# Copyright (C) 2006-2016 Linux Foundation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Call setting:
#   QEMU_MEMORY (optional) - set the amount of memory in the emualted system.
#   SERIAL_LOGFILE (optional) - log the serial port output to a file
#
# Image options:
#   FSTYPE - the image type to run
#   KERNEL - the kernel image file to use
#   ROOTFS - the disk image file to use
#

# if user set qemu memory, eg: -m 256 in qemu extra params, we need to do some 
# validation check
mem_set=`expr "$SCRIPT_QEMU_EXTRA_OPT" : '.*\(-m[[:space:]] *[0-9]*\)'`
if [ -n "$mem_set" ] ; then
    #Get memory setting size from user input
    mem_size=`echo $mem_set | sed 's/-m[[:space:]] *//'`
else
    mem_size=`echo $QEMU_MEM | sed 's/-m[[:space:]] *//'`
fi

# This file is created when runqemu-gen-tapdevs creates a bank of tap
# devices, indicating that the user should not bring up new ones using
# sudo.
NOSUDO_FLAG="/etc/runqemu-nosudo"

QEMUIFUP=`which runqemu-ifup 2> /dev/null`
QEMUIFDOWN=`which runqemu-ifdown 2> /dev/null`
if [ -z "$QEMUIFUP" -o ! -x "$QEMUIFUP" ]; then
       echo "runqemu-ifup cannot be found or executed"
       exit 1
fi
if [ -z "$QEMUIFDOWN" -o ! -x "$QEMUIFDOWN" ]; then
       echo "runqemu-ifdown cannot be found or executed"
       exit 1
fi

NFSRUNNING="false"

# capture original stty values
ORIG_STTY=$(stty -g)

DROOT="/dev/vda"
ROOTFS_OPTIONS="-drive file=$ROOTFS,if=virtio,format=raw"
if [ "$SLIRP_ENABLED" = "yes" ]; then
    KERNEL_NETWORK_CMD="ip=dhcp"
    QEMU_TAP_CMD=""
    QEMU_NETWORK_CMD=""
else
    acquire_lock() {
        lockfile=$1
        touch $lockfile.lock 2>/dev/null
        if [ $? -ne 0 ]; then
            echo "Acquiring lockfile for $lockfile.lock failed"
            return 1
        fi
        exec 8>$lockfile.lock
        flock -n -x 8
        if [ $? -ne 0 ]; then
            exec 8>&-
            return 1
        fi

        return 0
    }

    release_lock() {
        lockfile=$1
        if [ -z "$lockfile" ]; then
            echo "Error: missing lockfile arg passed to release_lock()"
            return 1
        fi

        rm -f $lockfile.lock
        exec  8>&-
    }

    LOCKDIR="/tmp/qemu-tap-locks"
    if [ ! -d "$LOCKDIR" ]; then
        mkdir $LOCKDIR
        chmod 777 $LOCKDIR
    fi

    IFCONFIG=`which ip 2> /dev/null`
    if [ -z "$IFCONFIG" ]; then
        IFCONFIG=/sbin/ip
    fi
    if [ ! -x "$IFCONFIG" ]; then
           echo "$IFCONFIG cannot be executed"
           exit 1
    fi

    POSSIBLE=`$IFCONFIG link | grep 'tap' | awk '{print $2}' | sed -e 's/://' -e 's/@.*//'`
    TAP=""
    LOCKFILE=""
    USE_PRECONF_TAP="no"
    for tap in $POSSIBLE; do
        LOCKFILE="$LOCKDIR/$tap"
        if [ -e "$LOCKFILE.skip" ]; then
            echo "Found $LOCKFILE.skip, skipping $tap"
            continue
        fi
        echo "Acquiring lockfile for $tap..."
        acquire_lock $LOCKFILE
        if [ $? -eq 0 ]; then
            TAP=$tap
            USE_PRECONF_TAP="yes"
            break
        fi
    done

    if [ "$TAP" = "" ]; then
        if [ -e "$NOSUDO_FLAG" ]; then
            echo "Error: There are no available tap devices to use for networking,"
            echo "and I see $NOSUDO_FLAG exists, so I am not going to try creating"
            echo "a new one with sudo."
            exit 1
        fi

        GROUPID=`id -g`
        USERID=`id -u`
        echo "Setting up tap interface under sudo"
        # Redirect stderr since we could see a LD_PRELOAD warning here if pseudo is loaded
        # but inactive. This looks scary but is harmless
        tap=`sudo $QEMUIFUP $USERID $GROUPID $OECORE_NATIVE_SYSROOT 2> /dev/null`
        if [ $? -ne 0 ]; then
            # Re-run standalone to see verbose errors
            sudo $QEMUIFUP $USERID $GROUPID $OECORE_NATIVE_SYSROOT
            return 1
        fi
        LOCKFILE="$LOCKDIR/$tap"
        echo "Acquiring lockfile for $tap..."
        acquire_lock $LOCKFILE
        if [ $? -eq 0 ]; then
            TAP=$tap
        fi 
    else
        echo "Using preconfigured tap device '$TAP'"
        echo "If this is not intended, touch $LOCKFILE.skip to make runqemu skip $TAP."
    fi

    cleanup() {
        if [ ! -e "$NOSUDO_FLAG" -a "$USE_PRECONF_TAP" = "no" ]; then
            # Redirect stderr since we could see a LD_PRELOAD warning here if pseudo is loaded
            # but inactive. This looks scary but is harmless
            sudo $QEMUIFDOWN $TAP $OECORE_NATIVE_SYSROOT 2> /dev/null
        fi
        echo "Releasing lockfile of preconfigured tap device '$TAP'"
        release_lock $LOCKFILE

        if [ "$NFSRUNNING" = "true" ]; then
            echo "Shutting down the userspace NFS server..."
            echo "runqemu-export-rootfs stop $ROOTFS"
            runqemu-export-rootfs stop $ROOTFS
        fi
        # If QEMU crashes or somehow tty properties are not restored
        # after qemu exits, we need to run stty sane
        #stty sane

        #instead of using stty sane we set the original stty values
        stty ${ORIG_STTY}

    }

    n0=$(echo $TAP | sed 's/tap//')

    case $n0 in
        ''|*[!0-9]*)
            echo "Error Couldn't turn $TAP into an interface number?"
            exit 1
            ;;
    esac

    n1=$(($n0 * 2 + 1))
    n2=$(($n1 + 1))

    KERNEL_NETWORK_CMD="ip=192.168.7.$n2::192.168.7.$n1:255.255.255.0"
    QEMU_TAP_CMD="-net tap,vlan=0,ifname=$TAP,script=no,downscript=no"
    if [ "$VHOST_ACTIVE" = "yes" ]; then
        QEMU_NETWORK_CMD="-net nic,model=virtio $QEMU_TAP_CMD,vhost=on"
    else
        QEMU_NETWORK_CMD="-net nic,model=virtio $QEMU_TAP_CMD"
    fi

    NFS_INSTANCE=`echo $TAP | sed 's/tap//'`
    export NFS_INSTANCE

    SERIALOPTS=""
    if [ "x$SERIAL_LOGFILE" != "x" ]; then
        SERIALOPTS="-serial file:$SERIAL_LOGFILE"
    fi
fi

if [ "$NFS_SERVER" = "" ]; then
    NFS_SERVER="192.168.7.1"
    if [ "$SLIRP_ENABLED" = "yes" ]; then
        NFS_SERVER="10.0.2.2"
    fi
fi

if [ "$FSTYPE" = "nfs" ]; then
    NFS_DIR=`echo $ROOTFS | sed 's/^[^:]*:\(.*\)/\1/'`
    if [ "$NFS_INSTANCE" = "" ] ; then
    NFS_INSTANCE=0
    fi
    MOUNTD_RPCPORT=$[ 21111 + $NFS_INSTANCE ]
    NFSD_RPCPORT=$[ 11111 + $NFS_INSTANCE ]
    NFSD_PORT=$[ 3049 + 2 * $NFS_INSTANCE ]
    MOUNTD_PORT=$[ 3048 + 2 * $NFS_INSTANCE ]
    UNFS_OPTS="nfsvers=3,port=$NFSD_PORT,mountprog=$MOUNTD_RPCPORT,nfsprog=$NFSD_RPCPORT,udp,mountport=$MOUNTD_PORT"

    PSEUDO_LOCALSTATEDIR=~/.runqemu-sdk/pseudo
    export PSEUDO_LOCALSTATEDIR

    # Start the userspace NFS server
    echo "runqemu-export-rootfs restart $ROOTFS"
    runqemu-export-rootfs restart $ROOTFS
    if [ $? != 0 ]; then
        return 1
    fi
    NFSRUNNING="true"
fi


# QEMU_MEMORY has 'M' appended to mem_size
QEMU_MEMORY="$mem_size"M

if [ "$KVM_ACTIVE" = "yes" ]; then
    CPU_SUBTYPE="$QEMU_CPU_SUBTYPE_KVM"
else
    CPU_SUBTYPE="$QEMU_CPU_SUBTYPE"
fi

set_qemu_name() {
    [ -z "$QEMU_NAME" ] && QEMU_NAME="$1"
}

config_aarch64() {
    QEMU_NETWORK_CMD="-netdev tap,id=net0,ifname=$TAP,script=no,downscript=no -device virtio-net-device,netdev=net0 "
    ROOTFS_OPTIONS="-drive id=disk0,file=$ROOTFS,if=none,format=raw -device virtio-blk-device,drive=disk0"
}

KERNEL_VGA_OPTIONS=""
config_x86() {
    if [ -z "$vga_option" ]; then
        QEMU_UI_OPTIONS="$QEMU_UI_OPTIONS -vga vmware"
    fi
    KERNEL_VGA_OPTIONS="vga=0 uvesafb.mode_option=640x480-32"
    # Currently oprofile's event based interrupt mode doesn't work(Bug #828) in
    # qemux86 and qemux86-64. We can use timer interrupt mode for now.
    KERNCMDLINE="$KERNCMDLINE oprofile.timer=1"
   
   if [ "$IS_VM" = "yes" ]; then
       QEMUOPTIONS="$CPU_SUBTYPE $QEMU_NETWORK_CMD $QEMU_UI_OPTIONS"
   fi
}

config_mips() {
    QEMU_UI_OPTIONS="-vga cirrus $QEMU_UI_OPTIONS"
}

config_ppc() {
    if [ "$SLIRP_ENABLED" != "yes" ]; then
        QEMU_NETWORK_CMD="-net nic,model=pcnet $QEMU_TAP_CMD"
    fi
}

set_qemu_name() {
    [ -z "$QEMU_NAME" ] && QEMU_NAME="$1"
}

case "$TUNE_ARCH" in
    arm|armv*)
        set_qemu_name "qemu-system-arm"
        ;;
    microblazeel)
        set_qemu_name "qemu-system-microblazeel"
        ;;
    aarch64)
        set_qemu_name "qemu-system-aarch64"
        config_aarch64
        ;;
    x86|i[3456]86)
        set_qemu_name "qemu-system-i386"
        config_x86
        ;;
    x86_64)
        set_qemu_name "qemu-system-x86_64"
        config_x86
        ;;
    mips*)
        set_qemu_name "qemu-system-$TUNE_ARCH"
        config_mips
        ;;
    powerpc)
        set_qemu_name "qemu-system-ppc"
        config_ppc
        ;;
    *)
        if [ -n "$QEMU_NAME" ]; then
            echo "Trying to boot unknown arch: $TUNE_ARCH"
        else
            echo_exit "Error: QEMU_NAME is not set"
        fi
    ;;
esac

QEMU_BIN="$STAGING_BINDIR_NATIVE/$QEMU_NAME"
QEMU="$QEMU_BIN $QEMU_OPTIONS"

if [ "$FSTYPE" = "nfs" ]; then
    if [ "$NFS_SERVER" = "192.168.7.1" -a ! -d "$NFS_DIR" ]; then
        echo "Error: NFS mount point $ROOTFS doesn't exist"
        cleanup
        return 1
    fi
    KERNCMDLINE="root=/dev/nfs nfsroot=$NFS_SERVER:$NFS_DIR,$UNFS_OPTS rw $QEMU_KERNEL_OPTIONS $KERNEL_NETWORK_CMD mem=$QEMU_MEMORY highres=off"
    QEMUOPTIONS="$CPU_SUBTYPE $QEMU_NETWORK_CMD $QEMU_UI_OPTIONS"
fi


if [ "$FSTYPE" = "cpio.gz" -o "$FSTYPE" = "cpio" ]; then
    KERNCMDLINE="root=/dev/ram0 rw $QEMU_KERNEL_OPTIONS debugshell"
    QEMUOPTIONS="$CPU_SUBTYPE $QEMU_DTB -initrd $ROOTFS"
fi

if [ "$FSTYPE" = "iso" ]; then
    QEMUOPTIONS="$CPU_SUBTYPE $QEMU_NETWORK_CMD -cdrom $ROOTFS $QEMU_UI_OPTIONS"
fi

if [ -z "$QEMUOPTIONS" ]; then
    KERNCMDLINE="$KERNEL_VGA_OPTIONS root=$DROOT rw $QEMU_KERNEL_OPTIONS $KERNEL_NETWORK_CMD mem=$QEMU_MEMORY highres=off"
    QEMUOPTIONS="$CPU_SUBTYPE $QEMU_NETWORK_CMD $ROOTFS_OPTIONS $QEMU_UI_OPTIONS $QEMU_DTB"
fi

if [ "$TCPSERIAL_PORTNUM" != "" ]; then
    if [ "$TUNE_ARCH" = "aarch64" ]; then
        SCRIPT_QEMU_EXTRA_OPT="$SCRIPT_QEMU_EXTRA_OPT -device virtio-serial-device -chardev socket,id=virtcon,port=$TCPSERIAL_PORTNUM,host=127.0.0.1 -device virtconsole,chardev=virtcon"
    else
        SCRIPT_QEMU_EXTRA_OPT="$SCRIPT_QEMU_EXTRA_OPT -serial tcp:127.0.0.1:$TCPSERIAL_PORTNUM"
    fi
fi

if [ ! -x "$QEMU_BIN" ]; then
    echo "Error: No QEMU binary '$QEMU_BIN' could be found."
    cleanup
    return 1
fi

NEED_GL=`ldd $QEMU_BIN 2>&1 | grep libGLU`
# We can't run without a libGL.so
if [ "$NEED_GL" != "" ]; then
    libgl='no'

    [ -e /usr/lib/libGL.so -a -e /usr/lib/libGLU.so ] && libgl='yes'
    [ -e /usr/lib64/libGL.so -a -e /usr/lib64/libGLU.so ] && libgl='yes'
    [ -e /usr/lib/*-linux-gnu/libGL.so -a -e /usr/lib/*-linux-gnu/libGLU.so ] && libgl='yes'

    if [ "$libgl" != 'yes' ]; then
        echo "You need libGL.so and libGLU.so to exist in your library path to run the QEMU emulator.
        Ubuntu package names are: libgl1-mesa-dev and libglu1-mesa-dev.
        Fedora package names are: mesa-libGL-devel mesa-libGLU-devel."
        return 1;
    fi
fi

do_quit() {
    cleanup
    return 1
}

trap do_quit INT TERM QUIT

# qemu got segfault if linked with nVidia's libgl
GL_LD_PRELOAD=$LD_PRELOAD

if ldd $QEMU_BIN | grep -i nvidia &> /dev/null
then
cat << EOM
WARNING: nVidia proprietary OpenGL libraries detected.
nVidia's OpenGL libraries are known to have compatibility issues with qemu,
resulting in a segfault. Please uninstall these drivers or ensure the mesa libGL
libraries precede nvidia's via LD_PRELOAD(Already do it on Ubuntu 10).
EOM

# Automatically use Ubuntu system's mesa libGL, other distro can add its own path
if grep -i ubuntu /etc/lsb-release &> /dev/null
then
    # precede nvidia's driver on Ubuntu 10
    UBUNTU_MAIN_VERSION=`cat /etc/lsb-release |grep DISTRIB_RELEASE |cut -d=  -f 2| cut -d. -f 1`
    if [ "$UBUNTU_MAIN_VERSION" = "10" ];
    then
        GL_PATH=""
        if test -e /usr/lib/libGL.so
        then 
            GL_PATH="/usr/lib/libGL.so"
        elif test -e /usr/lib/x86_64-linux-gnu/libGL.so
        then
            GL_PATH="/usr/lib/x86_64-linux-gnu/libGL.so"
        fi

        echo "Skip nVidia's libGL on Ubuntu 10!"
        GL_LD_PRELOAD="$GL_PATH $LD_PRELOAD"
    fi
fi
fi

if [ "x$SERIALSTDIO" = "x1" ]; then
        echo "Interrupt character is '^]'"
        stty intr ^]
fi

# Preserve the multiplexing behavior for the monitor that would be there based
# on whether nographic is used.
if ! echo "$QEMUOPTIONS $SERIALOPTS $SCRIPT_QEMU_OPT $SCRIPT_QEMU_EXTRA_OPT" | grep -q -- "-nographic"; then
    FIRST_SERIAL_OPT="-serial mon:vc"
fi

# We always want a ttyS1. Since qemu by default adds a serial port when
# nodefaults is not specified, it seems that all that would be needed is to
# make sure a "-serial" is there. However, it appears that when "-serial" is
# specified, it ignores the default serial port that is normally added.
# So here we make sure to add two -serial if there are none. And only one
# if there is one -serial already.
NUM_SERIAL_OPTS=`echo $QEMUOPTIONS $SERIALOPTS $SCRIPT_QEMU_OPT $SCRIPT_QEMU_EXTRA_OPT | sed -e 's/ /\n/g' | grep --count -- -serial`

if [ "$NUM_SERIAL_OPTS" = "0" ]; then
    SCRIPT_QEMU_EXTRA_OPT="$SCRIPT_QEMU_EXTRA_OPT $FIRST_SERIAL_OPT $QEMU_SECOND_SERIAL_OPT"
elif [ "$NUM_SERIAL_OPTS" = "1" ]; then
    SCRIPT_QEMU_EXTRA_OPT="$SCRIPT_QEMU_EXTRA_OPT $QEMU_SECOND_SERIAL_OPT"
fi

echo "Running $QEMU_BIN ..."
# -no-reboot is a mandatory option - see bug #100
if [ "$IS_VM" = "yes" -a "$FSTYPE" != "iso" ]; then
    # Check root=/dev/sdX or root=/dev/vdX
    [ ! -e "$ROOTFS" ] && error "VM image is not found!"
    if grep -q 'root=/dev/sd' $ROOTFS; then
        echo "Using scsi drive"
        VM_DRIVE="-drive if=none,id=hd,file=$ROOTFS -device virtio-scsi-pci,id=scsi -device scsi-hd,drive=hd"
    elif grep -q 'root=/dev/hd' $ROOTFS ; then
        echo "Using ide drive"
        VM_DRIVE="$ROOTFS"
    else
        echo "Using virtio block drive"
        VM_DRIVE="-drive if=virtio,file=$ROOTFS"
    fi
    QEMU_FIRE="$QEMU $VM_DRIVE $QEMUOPTIONS $SERIALOPTS -no-reboot $SCRIPT_QEMU_OPT $SCRIPT_QEMU_EXTRA_OPT"
    echo $QEMU_FIRE
    LD_PRELOAD="$GL_LD_PRELOAD" $QEMU_FIRE
elif [ "$FSTYPE" = "iso" -o "$FSTYPE" = "wic" ]; then
    QEMU_FIRE="$QEMU $QEMUOPTIONS $SERIALOPTS -no-reboot $SCRIPT_QEMU_OPT $SCRIPT_QEMU_EXTRA_OPT"
    echo $QEMU_FIRE
    LD_PRELOAD="$GL_LD_PRELOAD" $QEMU_FIRE
else
    QEMU_FIRE="$QEMU -kernel $KERNEL $QEMUOPTIONS $SLIRP_CMD $SERIALOPTS -no-reboot $SCRIPT_QEMU_OPT $SCRIPT_QEMU_EXTRA_OPT"
    echo $QEMU_FIRE -append '"'$KERNCMDLINE $SCRIPT_KERNEL_OPT'"'
    LD_PRELOAD="$GL_LD_PRELOAD" $QEMU_FIRE -append "$KERNCMDLINE $SCRIPT_KERNEL_OPT"
fi
ret=$?
if [ "$SLIRP_ENABLED" != "yes" ]; then
        cleanup
fi

#set the original stty values before exit
stty ${ORIG_STTY}
trap - INT TERM QUIT

return $ret
